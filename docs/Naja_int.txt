                                Naja interger instructions


0, add, +, +=,                  opcode = 0
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  0|<--- rd  ---->|0 | sh  |<-------- uimm8 ------>|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 + (rs1 << IMM);  // SH = 0, LSL
rd = rs0 + (rs1 >> IMM);  // SH = 1, LSR
rd = rs0 + (rs1 >> IMM);  // SH = 2, ASR
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  0|<--- rd  ---->|1 |<----------------- uimm15 ----------------->|<--- rs0 ---->|

rd = rs0 + (uint64_t)uimm15;
------------------------------------------------------------------------------------------------

1, sub, -, -=,                  opcode = 1
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  1|<--- rd  ---->|0 | sh  |<-------- uimm8 ------>|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 - (rs1 << IMM);  // SH = 0, LSL
rd = rs0 - (rs1 >> IMM);  // SH = 1, LSR
rd = rs0 - (rs1 >> IMM);  // SH = 2, ASR
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  1|<--- rd  ---->|1 |<----------------- uimm15 ----------------->|<--- rs0 ---->|

rd = rs0 - (uint64_t)uimm15;
------------------------------------------------------------------------------------------------


2, mul, *, *=,                  opcode = 2
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  1  0|<--- rd  ---->| s| opt | 0  0  0|<---- rs2 --->|<--- rs1 ---->|<--- rs0 ---->|

s = 0, unsigned mul.
s = 1,   signed mul.

rd = rs2 + rs0 * rs1; // opt = 0
rd = rs2 - rs0 * rs1; // opt = 1
rd =       rs0 * rs1; // opt = 2
------------------------------------------------------------------------------------------------

3, div, *, *=,                  opcode = 3
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  1  1|<--- rd  ---->| s| opt | 0  0  0|<---- rs2 --->|<--- rs1 ---->|<--- rs0 ---->|

s = 0, unsigned div.
s = 1,   signed div.

rd = rs2 + rs0 / rs1; // opt = 0
rd = rs2 - rs0 / rs1; // opt = 1
rd =       rs0 / rs1; // opt = 2
------------------------------------------------------------------------------------------------


4, ldr, b[i]                    opcode = 4
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  0  0|<--- rd  ---->| A|  ext   |<-------- simm12 ----------------->|<---- rb ---->|

rd = *(uint8_t* )(rs0 +  (int64_t)simm12);        // ext = 0, zbq
rd = *(uint16_t*)(rs0 + ((int64_t)simm12 << 1));  // ext = 1, zwq
rd = *(uint32_t*)(rs0 + ((int64_t)simm12 << 2));  // ext = 2, zlq

rd = *(uint64_t*)(rs0 + ((int64_t)simm12 << 3));  // ext = 3,

rd = *( int8_t* )(rs0 +  (int64_t)simm12);        // ext = 4, sbq
rd = *( int16_t*)(rs0 + ((int64_t)simm12 << 1));  // ext = 5, swq
rd = *( int32_t*)(rs0 + ((int64_t)simm12 << 2));  // ext = 6, slq

rb += simm12 << SH, if A = 1
------------------------------------------------------------------------------------------------

5, str, b[i]                    opcode = 5
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  0  1|<--- rd  ---->| A|  ext   |--------- simm12 ----------------->|<---- rb ---->|

*(uint8_t* )(rs0 +  (int64_t)simm12)       = rd;  // ext = 0, zbq
*(uint16_t*)(rs0 + ((int64_t)simm12 << 1)) = rd;  // ext = 1, zwq
*(uint32_t*)(rs0 + ((int64_t)simm12 << 2)) = rd;  // ext = 2, zlq
*(uint64_t*)(rs0 + ((int64_t)simm12 << 3)) = rd;  // ext = 3

rb += simm12 << SH, if A = 1
------------------------------------------------------------------------------------------------


6, and, &, &=,                  opcode = 6
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  1  0|<--- rd  ---->|0 | sh  |<-------- uimm8 ------>|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 & (rs1 << IMM);  // SH = 0, LSL
rd = rs0 & (rs1 >> IMM);  // SH = 1, LSR
rd = rs0 & (rs1 >> IMM);  // SH = 2, ASR
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  1  0|<--- rd  ---->|1 |<----------------- uimm15 ----------------->|<--- rs0 ---->|

rd = rs0 & (uint64_t)uimm15;
------------------------------------------------------------------------------------------------

7, or, |, |=,                   opcode = 7
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  1  1|<--- rd  ---->|0 | sh  |<-------- uimm8 ------>|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 | (rs1 << uimm8);  // SH = 0, LSL
rd = rs0 | (rs1 >> uimm8);  // SH = 1, LSR
rd = rs0 | (rs1 >> uimm8);  // SH = 2, ASR

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  1  1|<--- rd  ---->|1 |<----------------- uimm15 ----------------->|<--- rs0 ---->|

rd = rs0 | (uint64_t)uimm15;
------------------------------------------------------------------------------------------------

8, jmp, disp                   opcode = 8
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  0|<-------------------------------- simm26:00 -------------------------------->|

jmp disp; // -128M ~ 128M
------------------------------------------------------------------------------------------------


9, cmp, >, >=, <, <=, ==, !=,   opcode = 9
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  1| 0  0  0  0  0|0 | sh  |<-------- uimm8 ------>|<--- rs1 ---->|<--- rs0 ---->|

flags = rs0 - (rs1 << IMM);  // SH = 0, LSL
flags = rs0 - (rs1 >> IMM);  // SH = 1, LSR
flags = rs0 - (rs1 >> IMM);  // SH = 2, ASR

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  1| 0  0  0  0  0|1 |<----------------- uimm15 ----------------->|<--- rs0 ---->|

flags = rs0 - (uint64_t)uimm15;
------------------------------------------------------------------------------------------------


10, jmp, reg,                   opcode = 10
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  1  0|<--- rd  ---->| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0|

jmp *rd;
------------------------------------------------------------------------------------------------

|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  1  0|<----------------------------- simm21:00 -------------------->|<--- cc -->| 1|

jcc simm21:00; // -4M ~ +4M
cc = 0,  z,
cc = 1, nz,
cc = 2, ge,
cc = 3, gt,
cc = 4, le,
cc = 5, lt,
------------------------------------------------------------------------------------------------


11, setcc, &&,||,               opcode = 11
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  1  1|<--- rd  ---->|    cc     | 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0|

cc = 0,  z,
cc = 1, nz,
cc = 2, ge,
cc = 3, gt,
cc = 4, le,
cc = 5, lt,
------------------------------------------------------------------------------------------------


12, ldr, b[i << s]              opcode = 12
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  0  0|<--- rd  ---->|0 | ext    |<------ uimm7 ----->|<---- ri ---->|<---- rb ---->|

rd = *(uint8_t* )(rb + (ri << uimm7));      // ext = 0, zbq
rd = *(uint16_t*)(rb + (ri << uimm7)); // ext = 1, zwq
rd = *(uint32_t*)(rb + (ri << uimm7)); // ext = 2, zlq

rd = *(uint64_t*)(rb + (ri << uimm7));  // ext = 3,

rd = *( int8_t* )(rb + (ri << uimm7));  // ext = 4, sbq
rd = *( int16_t*)(rb + (ri << uimm7));  // ext = 5, swq
rd = *( int32_t*)(rb + (ri << uimm7));  // ext = 6, slq
------------------------------------------------------------------------------------------------

13, str, b[i << s]              opcode = 13
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  0  1|<--- rd  ---->|0 |  ext   |<-------- uimm7  -->|<---- ri ---->|<---- rb ---->|

rd = *(uint8_t* )(rb + (ri << uimm7));  // ext = 0, zbq
rd = *(uint16_t*)(rb + (ri << uimm7));  // ext = 1, zwq
rd = *(uint32_t*)(rb + (ri << uimm7));  // ext = 2, zlq

rd = *(uint64_t*)(rb + (ri << uimm7));  // ext = 3,

rd = *( int8_t* )(rb + (ri << uimm7));  // ext = 4, sbq
rd = *( int16_t*)(rb + (ri << uimm7));  // ext = 5, swq
rd = *( int32_t*)(rb + (ri << uimm7));  // ext = 6, slq
------------------------------------------------------------------------------------------------


14, teq, !,                  opcode = 14
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  0| 0  0  0  0  0|0 | sh  |<-------- uimm8 ------>|<--- rs1 ---->|<--- rs0 ---->|

ZF = rs0 & (rs1 << IMM);  // SH = 0, LSL
ZF = rs0 & (rs1 >> IMM);  // SH = 1, LSR
ZF = rs0 & (rs1 >> IMM);  // SH = 2, ASR

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  0| 0  0  0  0  0|1 |<----------------- uimm15 ----------------->|<--- rs0 ---->|

ZF = rs0 & (uint64_t)uimm15;
------------------------------------------------------------------------------------------------


15, mov, =, ~, -,                opcode = 15
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->|0 | 0|  opt   |<------------- uimm11 --------->|<---- rs ---->|

rd =  rs;           // opt = 0 LSL, uimm11 = 0
rd =  rs << uimm11; // opt = 0 LSL,
rd =  rs >> uimm11; // opt = 1 LSR,
rd =  rs >> uimm11; // opt = 2 ASR,
rd = ~rs;           // opt = 3 NOT,
rd = -rs;           // opt = 4 NEG,

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->|0 | 1|  opt   | 0  0  0  0  0  0|<--- rs1 ---->|<---- rs0---->|

rd =  rs << rs1; // opt = 0 LSL,
rd =  rs >> rs1; // opt = 1 LSR,
rd =  rs >> rs1; // opt = 2 ASR,

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->|0 | x|  opt   |<------------- uimm11 --------->|<---- rs ---->|

rd =  uint8_t(rs);  // x = 0, zbq, opt = 5,
rd =   int8_t(rs);  // x = 1, sbq, opt = 5,
rd = uint16_t(rs);  // x = 0, zwq, opt = 6,
rd =  int16_t(rs);  // x = 1, swq, opt = 6,
rd = uint32_t(rs);  // x = 0, zlq, opt = 7,
rd =  int32_t(rs);  // x = 1, slq, opt = 7,

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->|1 | x| opt    |<------------------  imm16 ------------------->|

rd = uint64_t(imm16);       // opt = 0
rd = uint64_t(imm16) << 16; // opt = 1
rd = uint64_t(imm16) << 32; // opt = 2
rd = uint64_t(imm16) << 48; // opt = 3

rd = uint64_t(imm16);       // opt = 7, NOT

rd = uint64_t(imm16);       //   x = 0, zwq
rd =  int64_t(imm16);       //   x = 1, swq
------------------------------------------------------------------------------------------------


24, call, disp                  opcode = 24
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  1  1  0  0  0|<-------------------------------- simm26:00 -------------------------------->|

call disp; // -128M ~ 128M
------------------------------------------------------------------------------------------------

26, call, reg,                  opcode = 26
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  1  1  0  1  0|<--- rd  ---->| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0|

call *rd;
------------------------------------------------------------------------------------------------

42, adrp, reg,                  opcode = 42
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 1  0  1  0  1  0|<--- rd  ---->|<--------------------   simm21   ---------------------------->|

rd = RIP + ((int64_t)simm21 << 15); // load address' high 21 bits relative to current RIP, -32G:+32G
------------------------------------------------------------------------------------------------

56, ret,                        opcode = 56
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 1  1  1  0  0  0|<-------------------------------- 00        -------------------------------->|

ret
------------------------------------------------------------------------------------------------

