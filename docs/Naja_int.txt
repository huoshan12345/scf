                                Naja interger instructions


0, add, +, +=,                  opcode = 0
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  0|<---- rd ---->| SH  |<---------- uimm9 ------->|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 + (rs1 << uimm9);  // SH = 0, LSL
rd = rs0 + (rs1 >> uimm9);  // SH = 1, LSR
rd = rs0 + (rs1 >> uimm9);  // SH = 2, ASR
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  0|<---- rd ---->| 1  1|<----------------- uimm14 -------------->|<--- rs0 ---->|

rd = rs0 + (uint64_t)uimm14; // SH = 3, IMM
------------------------------------------------------------------------------------------------

1, sub, -, -=,                  opcode = 1
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  1|<---- rd ---->| SH  |<---------- uimm9 ------->|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 - (rs1 << uimm9);  // SH = 0, LSL
rd = rs0 - (rs1 >> uimm9);  // SH = 1, LSR
rd = rs0 - (rs1 >> uimm9);  // SH = 2, ASR
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  1|<---- rd ---->| 1  1|<----------------- uimm14 -------------->|<--- rs0 ---->|

rd = rs0 - (uint64_t)uimm14; // SH = 3, IMM
------------------------------------------------------------------------------------------------

cmp, >, >=, <, <=, ==, !=,      opcode = 1
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  1| 1  1  1  1  1| SH  |<---------- uimm9 ------->|<--- rs1 ---->|<--- rs0 ---->|

flags = rs0 - (rs1 << uimm9);  // SH = 0, LSL, rd = 31
flags = rs0 - (rs1 >> uimm9);  // SH = 1, LSR, rd = 31
flags = rs0 - (rs1 >> uimm9);  // SH = 2, ASR, rd = 31

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  0  1| 1  1  1  1  1| 1  1|<----------------- uimm14 -------------->|<--- rs0 ---->|

flags = rs0 - (uint64_t)uimm14; // SH = 3, IMM, rd = 31
------------------------------------------------------------------------------------------------

2, mul, *, *=,                  opcode = 2
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  1  0|<---- rd ---->| opt | s| 0  0  0|<---- rs2 --->|<--- rs1 ---->|<--- rs0 ---->|

s = 0, unsigned mul.
s = 1,   signed mul.

rd = rs2 + rs0 * rs1; // opt = 0
rd = rs2 - rs0 * rs1; // opt = 1
rd =       rs0 * rs1; // opt = 2
------------------------------------------------------------------------------------------------

3, div, *, *=,                  opcode = 3
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  0  1  1|<--- rd ----->| opt | s| 0  0  0|<---- rs2 --->|<--- rs1 ---->|<--- rs0 ---->|

s = 0, unsigned div.
s = 1,   signed div.

rd = rs2 + rs0 / rs1; // opt = 0
rd = rs2 - rs0 / rs1; // opt = 1
rd =       rs0 / rs1; // opt = 2
------------------------------------------------------------------------------------------------

4, ldr, b[i]                    opcode = 4
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  0  0|<--- rd ----->| SH  | s|<----------- simm13 ----------------->|<---- rb ---->|

rd = *(uint8_t* )(rb +  (int64_t)simm13);        // SH = 0, s = 0, zbq
rd = *(uint16_t*)(rb + ((int64_t)simm13 << 1));  // SH = 1, s = 0, zwq
rd = *(uint32_t*)(rb + ((int64_t)simm13 << 2));  // SH = 2, s = 0, zlq

rd = *(uint64_t*)(rb + ((int64_t)simm13 << 3));  // SH = 3, s = 0, keep

rd = *( int8_t* )(rb +  (int64_t)simm13);        // SH = 0, s = 1, sbq
rd = *( int16_t*)(rb + ((int64_t)simm13 << 1));  // SH = 1, s = 1, swq
rd = *( int32_t*)(rb + ((int64_t)simm13 << 2));  // SH = 2, s = 1, slq
------------------------------------------------------------------------------------------------

5, pop, b[i]                    opcode = 5
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  0  1|<--- rd ----->| SH  | s| 0  0  0  0  0  0  0  0  0  0  0  0  0|<---- rb ---->|

rd = *(uint8_t* )rb;  // SH = 0, s = 0, zbq
rd = *(uint16_t*)rb;  // SH = 1, s = 0, zwq
rd = *(uint32_t*)rb;  // SH = 2, s = 0, zlq

rd = *(uint64_t*)rb;  // SH = 3, s = 0, keep

rd = *( int8_t* )rb;  // SH = 0, s = 1, sbq
rd = *( int16_t*)rb;  // SH = 1, s = 1, swq
rd = *( int32_t*)rb;  // SH = 2, s = 1, slq

rb += 1 << SH
------------------------------------------------------------------------------------------------

6, str, b[i]                    opcode = 6
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  1  0|<--- rs ----->| SH  | 0|<----------- simm13 ----------------->|<---- rb ---->|

*(uint8_t* )(rb +  (int64_t)simm13)       = rs;  // SH = 0, zbq
*(uint16_t*)(rb + ((int64_t)simm13 << 1)) = rs;  // SH = 1, zwq
*(uint32_t*)(rb + ((int64_t)simm13 << 2)) = rs;  // SH = 2, zlq
*(uint64_t*)(rb + ((int64_t)simm13 << 3)) = rs;  // SH = 3, keep
------------------------------------------------------------------------------------------------

7, push, b[i]                   opcode = 7
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  1  1|<---- rs ---->| SH  | s| 0  0  0  0  0  0  0  0  0  0  0  0  0|<---- rb ---->|

*(uint8_t* )rb = rs;  // SH = 0, s = 0, zbq
*(uint16_t*)rb = rs;  // SH = 1, s = 0, zwq
*(uint32_t*)rb = rs;  // SH = 2, s = 0, zlq
*(uint64_t*)rb = rs;  // SH = 3, s = 0, keep

rb -= 1 << SH
------------------------------------------------------------------------------------------------

8, and, &, &=,                  opcode = 8
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  0|<---- rd ---->| SH  |<---------- uimm9 ------->|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 & (rs1 << uimm9);  // SH = 0, LSL
rd = rs0 & (rs1 >> uimm9);  // SH = 1, LSR
rd = rs0 & (rs1 >> uimm9);  // SH = 2, ASR
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  0|<---- rd ---->| 1  1|<---------------- uimm14 --------------->|<--- rs0 ---->|

rd = rs0 & (uint64_t)uimm14; // SH = 3, IMM
------------------------------------------------------------------------------------------------

teq, !,                         opcode = 8
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  0| 1  1  1  1  1| SH  |<---------- uimm9 ------->|<--- rs1 ---->|<--- rs0 ---->|

ZF = rs0 & (rs1 << uimm9);  // SH = 0, LSL
ZF = rs0 & (rs1 >> uimm9);  // SH = 1, LSR
ZF = rs0 & (rs1 >> uimm9);  // SH = 2, ASR

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  0| 1  1  1  1  1| 1  1|<---------------- uimm14 --------------->|<--- rs0 ---->|

ZF = rs0 & (uint64_t)uimm14; // SH = 3, IMM
------------------------------------------------------------------------------------------------

9, or, |, |=,                   opcode = 9
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  0  1|<---- rd ---->| SH  |<---------- uimm9 ------->|<--- rs1 ---->|<--- rs0 ---->|

rd = rs0 | (rs1 << uimm8);  // SH = 0, LSL
rd = rs0 | (rs1 >> uimm8);  // SH = 1, LSR
rd = rs0 | (rs1 >> uimm8);  // SH = 2, ASR

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  0  1  1  1|<---- rd ---->| 1  1|<---------------- uimm14 --------------->|<--- rs0 ---->|

rd = rs0 | (uint64_t)uimm14; // SH = 3, IMM
------------------------------------------------------------------------------------------------

10, jmp, disp                   opcode = 10
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  1  0|<-------------------------------- simm26:00 -------------------------------->|

jmp disp; // -128M ~ 128M
------------------------------------------------------------------------------------------------

11, jmp, reg,                   opcode = 11
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  1  1|<---- rd ---->| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0|

jmp *rd;
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  0  1  1|<----------------------------- simm21:00 -------------------->|<--- cc -->| 1|

jcc simm21:00; // -4M ~ +4M
cc = 0,  z,
cc = 1, nz,
cc = 2, ge,
cc = 3, gt,
cc = 4, le,
cc = 5, lt,
------------------------------------------------------------------------------------------------

12, setcc, &&,||,               opcode = 12
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  0  0|<---- rd ---->| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0| 0|<--- cc -->| 0|

cc = 0,  z,
cc = 1, nz,
cc = 2, ge,
cc = 3, gt,
cc = 4, le,
cc = 5, lt,
------------------------------------------------------------------------------------------------

13, ldr, b[i << s]              opcode = 13
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  0  1|<--- rd ----->| SH  | s|<-------- uimm8 ------>|<---- ri ---->|<---- rb ---->|

rd = *(uint8_t* )(rb + (ri << uimm8));  // SH = 0, s = 0, zbq
rd = *(uint16_t*)(rb + (ri << uimm8));  // SH = 1, s = 0, zwq
rd = *(uint32_t*)(rb + (ri << uimm8));  // SH = 2, s = 0, zlq

rd = *(uint64_t*)(rb + (ri << uimm8));  // SH = 3, s = 0, keep

rd = *( int8_t* )(rb + (ri << uimm8));  // SH = 0, s = 1, sbq
rd = *( int16_t*)(rb + (ri << uimm8));  // SH = 1, s = 1, swq
rd = *( int32_t*)(rb + (ri << uimm8));  // SH = 2, s = 1, slq
------------------------------------------------------------------------------------------------

14, str, b[i << s]              opcode = 14
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  0|<---- rs ---->| SH  | s|<-------- uimm8 ------>|<---- ri ---->|<---- rb ---->|

*(uint8_t* )(rb + (ri << uimm8)) = rs;  // SH = 0, s = 0, zbq
*(uint16_t*)(rb + (ri << uimm8)) = rs;  // SH = 1, s = 0, zwq
*(uint32_t*)(rb + (ri << uimm8)) = rs;  // SH = 2, s = 0, zlq
*(uint64_t*)(rb + (ri << uimm8)) = rs;  // SH = 3, s = 0, keep
------------------------------------------------------------------------------------------------


15, mov, =, ~, -,                opcode = 15
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->| SH  | 0| 0  0| 0  0  0  0  0  0|<--- rs1 ---->|<---- rs0---->|

rd =  rs << rs1; // SH = 0 LSL,
rd =  rs >> rs1; // SH = 1 LSR,
rd =  rs >> rs1; // SH = 2 ASR,

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->| SH  | 0| 0  1|<------------- uimm11 --------->|<---- rs ---->|

rd = rs;           // SH = 0 LSL, uimm11 = 0
rd = rs << uimm11; // SH = 0 LSL,
rd = rs >> uimm11; // SH = 1 LSR,
rd = rs >> uimm11; // SH = 2 ASR,

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->| SH  | s| 1  0| 0  0  0  0  0  0  0  0  0  0  0|<---- rs ---->|

rd =  uint8_t(rs);  // SH = 0, s = 0, zbq,
rd = uint16_t(rs);  // SH = 1, s = 0, zwq,
rd = uint32_t(rs);  // SH = 2, s = 0, zlq

rd =   int8_t(rs);  // SH = 0, s = 1, sbq,
rd =  int16_t(rs);  // SH = 1, s = 1, swq
rd =  int32_t(rs);  // SH = 2, s = 1, slq

rd = ~rs;           // SH = 3, s = 0, NOT,
rd = -rs;           // SH = 3, s = 1, NEG,
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->| SH  | 0| 1  1|<------------------ uimm16 ------------------->|

rd = uint64_t(imm16);       // SH = 0, IMM
rd = uint64_t(imm16) << 16; // SH = 1, IMM
rd = uint64_t(imm16) << 32; // SH = 2, IMM
rd = uint64_t(imm16) << 48; // SH = 3, IMM

------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  0  1  1  1  1|<--- rd  ---->| 0  0| 1| 1  1|<------------------ uimm16 ------------------->|

rd = uint64_t(imm16); // NOT
------------------------------------------------------------------------------------------------

26, call, disp                  opcode = 26
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  1  1  0  1  0|<-------------------------------- simm26:00 -------------------------------->|

call disp; // -128M ~ 128M
------------------------------------------------------------------------------------------------

27, call, reg,                  opcode = 27
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 0  1  1  0  1  1|<---- rd ---->| 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0|

call *rd;
------------------------------------------------------------------------------------------------

42, adrp, reg,                  opcode = 42
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 1  0  1  0  1  0|<--- rd  ---->|<--------------------   simm21   ---------------------------->|

rd = RIP + ((int64_t)simm21 << 14); // load address' high 21 bits relative to current RIP, -16G:+16G
------------------------------------------------------------------------------------------------

56, ret,                        opcode = 56
------------------------------------------------------------------------------------------------
|31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
| 1  1  1  0  0  0|<-------------------------------- 00        -------------------------------->|

ret
------------------------------------------------------------------------------------------------
