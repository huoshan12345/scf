/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: scf_eda.proto */

#ifndef PROTOBUF_C_scf_5feda_2eproto__INCLUDED
#define PROTOBUF_C_scf_5feda_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ScfEline ScfEline;
typedef struct _ScfEpin ScfEpin;
typedef struct _ScfEcomponent ScfEcomponent;
typedef struct _ScfEfunction ScfEfunction;
typedef struct _ScfEboard ScfEboard;


/* --- enums --- */


/* --- messages --- */

struct  _ScfEline
{
  ProtobufCMessage base;
  uint32_t x0;
  uint32_t y0;
  uint32_t x1;
  uint32_t y1;
};
#define SCF_ELINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scf_eline__descriptor) \
    , 0, 0, 0, 0 }


struct  _ScfEpin
{
  ProtobufCMessage base;
  size_t n_tos;
  uint64_t *tos;
  uint64_t id;
  uint64_t flags;
  uint32_t x;
  uint32_t y;
  size_t n_lines;
  ScfEline **lines;
};
#define SCF_EPIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scf_epin__descriptor) \
    , 0,NULL, 0, 0, 0, 0, 0,NULL }


struct  _ScfEcomponent
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t type;
  size_t n_pins;
  ScfEpin **pins;
  uint32_t x;
  uint32_t y;
  uint32_t w;
  uint32_t h;
};
#define SCF_ECOMPONENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scf_ecomponent__descriptor) \
    , 0, 0, 0,NULL, 0, 0, 0, 0 }


struct  _ScfEfunction
{
  ProtobufCMessage base;
  char *name;
  size_t n_components;
  ScfEcomponent **components;
};
#define SCF_EFUNCTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scf_efunction__descriptor) \
    , NULL, 0,NULL }


struct  _ScfEboard
{
  ProtobufCMessage base;
  size_t n_functions;
  ScfEfunction **functions;
};
#define SCF_EBOARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scf_eboard__descriptor) \
    , 0,NULL }


/* ScfEline methods */
void   scf_eline__init
                     (ScfEline         *message);
size_t scf_eline__get_packed_size
                     (const ScfEline   *message);
size_t scf_eline__pack
                     (const ScfEline   *message,
                      uint8_t             *out);
size_t scf_eline__pack_to_buffer
                     (const ScfEline   *message,
                      ProtobufCBuffer     *buffer);
ScfEline *
       scf_eline__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scf_eline__free_unpacked
                     (ScfEline *message,
                      ProtobufCAllocator *allocator);
/* ScfEpin methods */
void   scf_epin__init
                     (ScfEpin         *message);
size_t scf_epin__get_packed_size
                     (const ScfEpin   *message);
size_t scf_epin__pack
                     (const ScfEpin   *message,
                      uint8_t             *out);
size_t scf_epin__pack_to_buffer
                     (const ScfEpin   *message,
                      ProtobufCBuffer     *buffer);
ScfEpin *
       scf_epin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scf_epin__free_unpacked
                     (ScfEpin *message,
                      ProtobufCAllocator *allocator);
/* ScfEcomponent methods */
void   scf_ecomponent__init
                     (ScfEcomponent         *message);
size_t scf_ecomponent__get_packed_size
                     (const ScfEcomponent   *message);
size_t scf_ecomponent__pack
                     (const ScfEcomponent   *message,
                      uint8_t             *out);
size_t scf_ecomponent__pack_to_buffer
                     (const ScfEcomponent   *message,
                      ProtobufCBuffer     *buffer);
ScfEcomponent *
       scf_ecomponent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scf_ecomponent__free_unpacked
                     (ScfEcomponent *message,
                      ProtobufCAllocator *allocator);
/* ScfEfunction methods */
void   scf_efunction__init
                     (ScfEfunction         *message);
size_t scf_efunction__get_packed_size
                     (const ScfEfunction   *message);
size_t scf_efunction__pack
                     (const ScfEfunction   *message,
                      uint8_t             *out);
size_t scf_efunction__pack_to_buffer
                     (const ScfEfunction   *message,
                      ProtobufCBuffer     *buffer);
ScfEfunction *
       scf_efunction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scf_efunction__free_unpacked
                     (ScfEfunction *message,
                      ProtobufCAllocator *allocator);
/* ScfEboard methods */
void   scf_eboard__init
                     (ScfEboard         *message);
size_t scf_eboard__get_packed_size
                     (const ScfEboard   *message);
size_t scf_eboard__pack
                     (const ScfEboard   *message,
                      uint8_t             *out);
size_t scf_eboard__pack_to_buffer
                     (const ScfEboard   *message,
                      ProtobufCBuffer     *buffer);
ScfEboard *
       scf_eboard__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scf_eboard__free_unpacked
                     (ScfEboard *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ScfEline_Closure)
                 (const ScfEline *message,
                  void *closure_data);
typedef void (*ScfEpin_Closure)
                 (const ScfEpin *message,
                  void *closure_data);
typedef void (*ScfEcomponent_Closure)
                 (const ScfEcomponent *message,
                  void *closure_data);
typedef void (*ScfEfunction_Closure)
                 (const ScfEfunction *message,
                  void *closure_data);
typedef void (*ScfEboard_Closure)
                 (const ScfEboard *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor scf_eline__descriptor;
extern const ProtobufCMessageDescriptor scf_epin__descriptor;
extern const ProtobufCMessageDescriptor scf_ecomponent__descriptor;
extern const ProtobufCMessageDescriptor scf_efunction__descriptor;
extern const ProtobufCMessageDescriptor scf_eboard__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_scf_5feda_2eproto__INCLUDED */
